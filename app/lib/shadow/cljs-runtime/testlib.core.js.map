{"version":3,"sources":["testlib/core.cljs"],"mappings":";;AAGA;;;sBAAA,tBAAeA;AAAf,AAGE,gHAAA,zGAACC;;;AAEH;;;;;;qBAAA,rBAAeC,kDAKZC,EAAEC;AALL,AAME,QAAGD,IAAEC;;;AAGP,uBAAA,vBAAeC,sDAASC;AAAxB,AACE,IAAME,SAAO,6CAAA,7CAACC;AAAd,AACE,oHAAA,pHAACC,kDACA,AAACC,oDACDL,iBAEA,WAAKM;AAAL,AAAQ,OAACC,sBAAOL,OAAQ,kBAAI,AAAA,qFAAQI,IACV,AAAA,qFAAQA,GACR,AAAA,oFAAQA;;;AAPrC,OAAAL,gBAQGC","names":["testlib.core/myfunc","cljs.core.println","testlib.core/myadd","a","b","testlib.core/compile","source-string","cljs.core/deref","result","cljs.core.atom","cljs.js.compile_str","cljs.js.empty_state","x","cljs.core/reset!"],"sourcesContent":["(ns testlib.core\n  (:require [cljs.js :as c]))\n\n(defn ^:export myfunc\n  \"Prints hello world to the console\"\n  []\n  (println \"HELLO WORLD\"))\n\n(defn ^:export myadd\n  \"Adds two numbers together and returns the result\n    `a` - number\n    `b`- number\n  \"\n  [a b]\n  (+ a b))\n\n\n(defn ^:export compile [source-string]\n  (let [result (atom nil)]\n    (c/compile-str\n     (c/empty-state)\n     source-string\n     \"\"\n     (fn [x] (reset! result  (if (:error x)\n                               (:error x)\n                               (:value x)))))\n    @result))\n"]}